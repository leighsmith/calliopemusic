
/* Generated by Interface Builder */

#import "RunInspector.h"
#import "Runner.h"
#import "DrawApp.h"
#import "DrawDocument.h"
#import "GraphicView.h"
#import "GVSelection.h"
#import "GVFormat.h"
#import "System.h"
#import "Staff.h"
#import "TextVarCell.h"
#import <AppKit/AppKit.h>
#import "mux.h"

@implementation RunInspector

extern int justcode[4];

#define UPDATE(lv,rv) if (lv != rv) { lv = rv; b = YES; }



- insertVar: sender
{
//  TextVarCell *v = [[TextVarCell alloc] init: [[sender selectedCell] tag]];
//  [[scroller documentView] replaceSelWithCell:v];
    /*sb: here I start to do things the NSAttributedString way. Hmmmph */
    NSTextStorage* theStorage = [[scroller documentView] textStorage];
    TextVarCell *v = [[TextVarCell alloc] init: [[sender selectedCell] tag]];
    char myTag = [[sender selectedCell] tag];
    NSAttributedString *theAttrString;
    NSFileWrapper *theWrapper = [[NSFileWrapper alloc] initRegularFileWithContents:[NSData dataWithBytes:&myTag length:1]];
    NSTextAttachment *theAttachment;
    [theWrapper setPreferredFilename:@"UNTITLED"];
    theAttachment = [[NSTextAttachment alloc] initWithFileWrapper:theWrapper];
    [v setAttachment:theAttachment];
    [theAttachment setAttachmentCell:v];
    theAttrString = [NSAttributedString attributedStringWithAttachment:theAttachment];
    [theStorage beginEditing];
    [theStorage replaceCharactersInRange:[[scroller documentView] selectedRange] withAttributedString:theAttrString];
    [theStorage endEditing];

  return self;
}


/*
  The complication here is to reset the runner tables only if
  certain flags are updated.
*/

- set:sender
{
  int i;
  Runner *p = currshow;
  System *sys = p->client;
  BOOL b = NO;
  if (p == nil) NSBeep();
  else
  {
    p->flags.just = [alignmatrix selectedColumn];
    i = [headfootmatrix selectedRow];    
    UPDATE(p->flags.vertpos, i);
    i = [placematrix selectedColumn];
    UPDATE(p->flags.horizpos, i);
    i = [[typematrix cellAtRow:0 column:0] state];
    UPDATE(p->flags.onceonly, i);
    i = [[typematrix cellAtRow:1 column:0] state];
    UPDATE(p->flags.nextpage, i);
    i = [[typematrix cellAtRow:0 column:1] state];
    UPDATE(p->flags.evenpage, i);
    i = [[typematrix cellAtRow:1 column:1] state];
    UPDATE(p->flags.oddpage, i);
    if (b) [sys->view setRunnerTables];
    if (p->data) [p->data release];
    p->data = [[[scroller documentView] textStorage] retain];
    /*[[[scroller documentView] RTFDFromRange:NSMakeRange(0, [[[scroller documentView] string] length])] retain]; */
    p->length = 0;/*sb: redundant */
    /* [self close]; */
    [sys->view dirty];
    [sys->view recacheWhenRedraw:NSZeroRect];
    [sys->view setNeedsDisplay:YES];
  }
  return self;
}



- show: (Runner *) p
{
  NSTextView *tv;
  if (currshow == p) return self;
  currshow = p;
  [headfootmatrix selectCellAtRow:p->flags.vertpos column:0];
  [placematrix selectCellAtRow:0 column:p->flags.horizpos];
  [alignmatrix selectCellAtRow:0 column:p->flags.just];
  [typematrix setState:p->flags.onceonly atRow:0 column:0];
  [typematrix setState:p->flags.nextpage atRow:1 column:0];
  [typematrix setState:p->flags.evenpage atRow:0 column:1];
  [typematrix setState:p->flags.oddpage atRow:1 column:1];
  tv = [scroller documentView];
  if (!(p->data))
  {
    [tv setString:@""];
    [tv setFont:[[NSApp currentDocument] getPreferenceAsFont: RUNFONT]];
  }
  else
  {
  [[tv textStorage] beginEditing];
      [[tv textStorage] replaceCharactersInRange:NSMakeRange(0, [[tv string] length]) withAttributedString:p->data];
      [[tv textStorage] endEditing];
  }
  return self;
}


- preset
{
  int n;
  GraphicView *v = [[NSApp currentDocument] view];
  Runner *r = [v canInspect: RUNNER : &n];
  if (n == 0) return nil;
  [self show: r];
  return self;
}


- next: sender
{
  id p;
  Runner *r;
  int i, j, k;
  if (currshow == nil)
  {
    NSBeep();
    return self;
  }
  p = ((System *) ((Runner *) currshow)->client)->objs;
  k = [p count];
  j = [p indexOfObject:currshow];
  for (i = j + 1; i < k; i++)
  {
    r = [p objectAtIndex:i];
    if (TYPEOF(r) == RUNNER) return [self show: r];
  }
  for (i = 0; i < j; i++)
  {
    r = [p objectAtIndex:i];
    if (TYPEOF(r) == RUNNER) return [self show: r];
  }
  NSBeep();
  return self;
}


- align: sender
{
    [[scroller documentView] setAlignment:justcode[[alignmatrix selectedColumn]]];
    return self;
}


@end
